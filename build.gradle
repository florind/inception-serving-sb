buildscript {
	ext {
		springBootVersion = '3.1.3'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/release" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "de.undercouch:gradle-download-task:5.5.0"
		classpath "net.saliman:gradle-cobertura-plugin:4.0.0"
	}
}

plugins {
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'com.github.kt3k.coveralls' version '2.12.2'
	id 'io.franzbecker.gradle-lombok' version '5.0.0'
	id 'com.github.nbaztec.coveralls-jacoco' version '1.2.16'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: 'de.undercouch.download'
apply plugin: 'jacoco'

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/release" }
}

configurations {
	asciidoctorExtensions
}

dependencies {
  implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.projectlombok:lombok:1.18.28')
	implementation('org.tensorflow:tensorflow-core-platform:0.5.0')
	implementation('commons-io:commons-io:2.13.0')
	implementation('jmimemagic:jmimemagic:0.1.2')

  asciidoctorExtensions('org.springframework.restdocs:spring-restdocs-asciidoctor')
  testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
  testImplementation('org.springframework.boot:spring-boot-starter-test')
}

test {
	useJUnitPlatform()
}

ext {
  snippetsDir = file('build/generated-snippets')
}

asciidoctor {
	configurations "asciidoctorExtensions"
	inputs.dir snippetsDir
	dependsOn test
}

asciidoctor.doLast {
	copy {
		from layout.buildDirectory.file("docs/asciidoc/index.html")
		into layout.buildDirectory.dir("resources/main/static/docs")
	}
}

jacoco {
	toolVersion = "0.8.9"
	reportsDirectory.set(layout.buildDirectory.dir("reports/jacoco"))
}

test {
	outputs.dir snippetsDir
}

bootJar {
	dependsOn(asciidoctor)
	mainClass.set("com.newsplore.Application")
	launchScript()
}

bootRun {
  dependsOn asciidoctor
}

import de.undercouch.gradle.tasks.download.Download

tasks.register('downloadInceptionFrozen', Download) {
	onlyIfNewer true
	src 'https://storage.googleapis.com/download.tensorflow.org/models/inception_v3_2016_08_28_frozen.pb.tar.gz'
	dest new File(buildDir, 'inception_v3_2016_08_28_frozen.pb.tar.gz')
}

tasks.register('fetchInceptionFrozenModel', Copy) {
	dependsOn downloadInceptionFrozen
	from tarTree(downloadInceptionFrozen.dest)
	into 'src/main/resources/inception-v3'
}

processResources.dependsOn('fetchInceptionFrozenModel')

lombok {
	version = '1.18.28'
	sha256 = ""
}

test.dependsOn(fetchInceptionFrozenModel)
test.finalizedBy(jacocoTestReport)

build {
	dependsOn fetchInceptionFrozenModel, asciidoctor
}

jacocoTestReport {
	reports {
		xml.required.set(true)
		csv.required.set(false)
		html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
	}
}
